[buildout]
extends = config.cfg
download-cache = /home/jean/.buildout/downloads

parts =
    mkdir_postgres
    postgres
    proj
    geos
    gdal
    postgis
    postgres_init
    psycopg2

[mkdir_postgres]
# The postgres recipe doesn't handle creation 
recipe = z3c.recipe.mkdir
mode = 0700
paths = 
    ${config:postgres_socket_dir}

[postgres]
recipe = sact.recipe.postgresql
url = http://ftp.postgresql.org/pub/source/v${config:postgres_version}/postgresql-${config:postgres_version}.tar.bz2
superusers = geonode2
# Postgres has to be configured like this: can't use a template
postgresql.conf = 
    ${config:postgres_dirs}
    port = ${config:postgres_port}
    hba_file = ${:location}/hba_file.conf

[postgres]
recipe = zc.recipe.cmmi
url = http://ftp.postgresql.org/pub/source/v${config:postgres_version}/postgresql-${config:postgres_version}.tar.bz2

[postgres_config]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/postgres.conf.in
output = ${postgres:location}/postgres.conf

[postgres_hba_config]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/pg_hba.conf.in
output = ${postgres:location}/pg_hba.conf

[postgres_initdb]
recipe = collective.recipe.cmd
on_install = true
cmds = 
    ${postgres:location}/bin/initdb -D ${config:postgres_data_dir} -U ${config:postgres_admin_name}

[postgres_createusers]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds = 
    ${postgres:location}/bin/pg_ctl -D ${config:postgres_data_dir} -o "-c config_file=${postgres:location}/postgres.conf" start
    status='continue'
    echo 'Connecting to postgres ...'
    while [ $status -ne 0 ] 
      do 
        echo '...'
        ${postgres:location}/bin/psql -h ${config:postgres_socket_dir} -U ${config:postgres_admin_name} -i
        status=$?
        if [ $status -ne 0] then 
          sleep 1
        fi
      done
    for user in ${config:postgres_superuser_name} 
      do
        ${postgres:location}/bin/createuser -s -d -r -h ${config:postgres_socket_dir} -U ${config:postgres_admin_name} $user
      done

[proj]
recipe = zc.recipe.cmmi
url = http://download.osgeo.org/proj/proj-${config:proj_version}.tar.gz

[geos]
recipe = zc.recipe.cmmi
url = http://download.osgeo.org/geos/geos-${config:geos_version}.tar.bz2

[gdal]
recipe = zc.recipe.cmmi
# New URL pattern since 1.10
url = http://download.osgeo.org/gdal/${config:gdal_version}/gdal-${config:gdal_version}.tar.gz
extra_options =
    --with-geos=${geos:location}/bin/geos-config

[postgis]
recipe = hexagonit.recipe.cmmi
url = http://download.osgeo.org/postgis/source/postgis-${config:postgis_version}.tar.gz
configure-options =
    --with-pgconfig=${postgres:location}/bin/pg_config
    --with-geosconfig=${geos:location}/bin/geos-config
    --with-projdir=${proj:location}
    --with-gdalconfig=${gdal:location}/bin/gdal-config

[postgres_init]
recipe = makina.recipe.postgres
bin = ${postgres:location}/bin
initdb = --auth=trust --pgdata=${config:postgres_data_dir}
pgdata = ${config:postgres_data_dir}
port = ${config:postgres_port}
cmds =
    createuser -h ${config:postgres_host} -p ${config:postgres_port} -P ${config:postgres_user_name}
    dropdb -h ${config:postgres_host} -p ${config:postgres_port}  ${config:postgres_db_name}
    createdb -h ${config:postgres_host} -p ${config:postgres_port} -E UTF8 -l en_US.UTF8 -T template0 ${config:postgres_db_name}
    createlang -h ${config:postgres_host} -p ${config:postgres_port} -U ${config:postgres_user_name} -d ${config:postgres_db_name} plpgsql
    psql -f ${postgis:location}/share/postgis.sql
    psql -f ${postgis:location}/share/spatial_ref_sys.sql
    psql -c 'GRANT ALL ON geometry_columns TO PUBLIC;'
    psql -c 'GRANT ALL ON spatial_ref_sys TO PUBLIC;'
    psql -c 'GRANT ALL ON geography_columns TO PUBLIC;'

[psycopg2]
recipe = zc.recipe.egg:custom
egg = psycopg2
include-dirs =
    ${postgres:location}/include
library-dirs =
    ${postgres:location}/lib
rpath =
    ${postgres:location}/lib
